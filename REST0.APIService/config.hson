/*
  This is a services descriptor configuration file encoded in HSON, a human-readable, extended JSON format
  with support for comments and multi-line string literals.

  A multi-line string literal is defined as @"..." and has the same semantics as C#'s multi-line string literal.
  Comments may appear in block-format like this, or in single-line format like below.

  In order to expedite parsing, forward-references are not allowed. Services must be defined
  in document order.

  Service names may be subdivided into multiple parts, so long as the parts are separated by ';'. Do not use
  '/' to separate service name parts as that will conflict with URL requirements.

  API request URLs are of the form:
    `GET /meta/serviceName`
    `GET /meta/serviceName/methodName`
    `GET /data/serviceName/methodName?params`
  Examples:
    `GET /data/sis;core/GetStudent?id=1`

  A request parameter may be assigned an explicit NULL value via `param=%00`, i.e. encoding the NUL character in the URL.
*/
{
    // This is the main set of aliases for services:
    "aliases": {
        "sis;core": "sis;core;v5"
    },
    // The "$" key indicates a shared dictionary of key/value pairs. This is the global dictionary.
    // Its values may be overridden per service. These values can be interpolated in string literals with
    // the interpolation syntax `${key}`. Key names may be anything, excluding the `}` character.
    "$": {
        // Here we define the database view names for versioning purposes:
        "Student":  "vw_Student",
    },
    // This is the global set of common query parameter types. This set is inherited by each root service and their derived services.
    "parameterTypes": {
        "StudentID":        { "type": "int",                "description": "A unique identifier for a Student record" },
        "FirstName":        { "type": "nvarchar(50)" },
        "DateTimeOffset":   { "type": "datetimeoffset(7)" },
        "Grade":            { "type": "decimal(8,4)" },
        "AnyText":          { "type": "nvarchar(max)" }
    },
    // This is the main services description section:
    "services": {
        // This is version "v1" of the "core":
        "sis;core;v1": {
            // This is the base dictionary. Its values may be overridden in derived services.
            "$": {
                // Here we define the database view names for versioning purposes:
                "Student":      "vw001_Student",
                // 'Student;st' is a list of the columns commonly selected from the 'Student' view using the
                // 'st' alias:
                "Student;st":   "st.StudentID, st.FirstName, st.LastName"
            },
            // The shared DB connection for all methods (but may be overridden per method):
            "connection": {
                "dataSource":       "(local)",
                "initialCatalog":   "APITest",
                "connectTimeout":   2
            },
            // This is the main method definition section:
            "methods": {
                // Each key is a specific method name; method names must be unique:
                "GetStudent": {
                    // This is the mapping of which query-string parameter names map to which SQL parameters:
                    "parameters": {
                        "id":       { "sqlName": "@id",     "type": "StudentID",    "description": "StudentID to look up" }
                    },
                    // The individual clauses of the SELECT query, appearing in any order:
                    "query": {
                        "from":     "${Student} st",
                        "where":    "st.StudentID = @id",
                        "select":   "${Student;st}"
                    }
                },
                "Test": {
                    "parameters": {
                        // Add `"optional": true` to make a parameter optional; its default value will be the value of
                        // the "default" property (if it exists) or `null`.
                        "test":     { "sqlName": "@test",   "type": "Grade",    "optional": true, "default": 10 }
                    },
                    "query": {
                        "select":   "@test AS Test"
                    }
                }
            }
        },
        "sis;core;v2": {
            // The "base" directive indicates which service to inherit the definition of. Everything defined in
            // the base service is included in this definition and may be overridden or removed by assigning it
            // to a `null` value.
            "base": "sis;core;v1",
            // Methods are added to/overwritten over the base service:
            "methods": {
                // Define a Questionable method to demonstrate deprecation:
                "Questionable": {
                    "parameters": {
                        "id":       { "sqlName": "@id",     "type": "StudentID",    "optional": true },
                        "test":     { "sqlName": "@test",   "type": "Grade",        "optional": true }
                    },
                    "query": {
                        // Setting up the WITH XMLNAMESPACES clause for the SQLXML query:
                        "xmlns": {
                            "sis":    "http://sis.example.org/v1",
                        },
                        "from":         "Test t",
                        "select":       "t.Test34.query('/sis:*') AS SISelements"
                    }
                }
            }
        },
        "sis;core;v3": {
            "base": "sis;core;v2",
            // Methods are added to/overwritten over the base service:
            "methods": {
                // We deprecate the "Questionable" method here with a warning message; it may still be used, but
                // a warning will be issued.
                "Questionable": { "deprecated": "This method does not correctly query data." }
            }
        },
        "sis;core;v4": {
            "base": "sis;core;v3",
            "parameterTypes": {
                "LastName":     { "type": "nvarchar(50)" }
            },
            "methods": {
                // We remove the "Questionable" method here by setting it to `null`. Requests to use it are
                // given a "400 Bad Request" response.
                "Questionable": null,
                // Add a new method:
                "GetStudentByName": {
                    "parameters": {
                        "firstName":    { "sqlName": "@firstName",  "type": "FirstName" },
                        "lastName":     { "sqlName": "@lastName",   "type": "LastName" }
                    },
                    "query": {
                        "from":         "${Student} st",
                        "where":        "(st.FirstName = @firstName) AND (st.LastName = @lastName)",
                        "select":       "${Student;st}"
                    }
                }
            }
        },
        // Here we introduce the HSON `@import` directive used to directly import HSON from other
        // local files directly into this document. This helps break out large service offerings
        // into more manageable divisions. `@import` directives may be placed at any point in the
        // HSON document, so long as the final result produces a well-formed JSON result.
        @import("sis;core;v5.hson"),
        @import("error-tests.hson"),
        @import("success-tests.hson")
    }
}