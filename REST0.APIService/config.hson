/*
  This is a services descriptor configuration file encoded in HSON, a human-readable, extended JSON format
  with support for comments and multi-line string literals.

  A multiline string literal is defined as @"..." and has the same semantics as C#'s multiline string literal.
  Comments may appear in block-format like this, or in single-line format like below.

  In order to expedite parsing, forward-references are not allowed. Services must be defined
  in document order.

  Service names may be subdivided into multiple parts, so long as the parts are separated by ';'. Do not use
  '/' to separate service name parts as that will conflict with URL requirements.

  API request URLs are of the form:
    `GET /meta/serviceName`
    `GET /meta/serviceName/methodName`
    `GET /data/serviceName/methodName?params`
  Examples:
    `GET /data/sis;core/GetStudent?id=1`

  A request parameter may be assigned an explicit NULL value via `param=%00`, i.e. encoding the NUL character in the URL.
*/
{
    // This is the main set of aliases for services:
    "aliases": {
        "sis;core": "sis;core;v5"
    },
    // The "$" key indicates a shared dictionary of key/value pairs. This is the global dictionary.
    // Its values may be overridden per service. These values can be interpolated in string literals with
    // the interpolation syntax `${key}`. Key names may be anything, excluding the `}` character.
    "$": {
        // Here we define the database view names for versioning purposes:
        "Student":  "vw_Student",
    },
    // This is the global set of common query parameter types. This set is inherited by each root service and their derived services.
    "parameterTypes": {
        "StudentID":        { "type": "int" },
        "FirstName":        { "type": "nvarchar(50)" },
        "DateTimeOffset":   { "type": "datetimeoffset(7)" },
        "Grade":            { "type": "decimal(8,4)" }
    },
    // This is the main services description section:
    "services": {
        // This is version "v1" of the "core":
        "sis;core;v1": {
            // This is the base dictionary. Its values may be overridden in derived services.
            "$": {
                // Here we define the database view names for versioning purposes:
                "Student":      "vw001_Student",
                // 'Student;st' is a list of the columns commonly selected from the 'Student' view using the
                // 'st' alias:
                "Student;st":   "st.StudentID, st.FirstName, st.LastName"
            },
            // The shared DB connection for all methods (but may be overridden per method):
            "connection": {
                "dataSource":       "(local)\\SQLEXPRESS",
                "initialCatalog":   "APITest"
            },
            // This is the main method definition section:
            "methods": {
                // Each key is a specific method name; method names must be unique:
                "GetStudent": {
                    // This is the mapping of which query-string parameter names map to which SQL parameters:
                    "parameters": {
                        "id":       { "sqlName": "@id",     "type": "StudentID" }
                    },
                    // The individual clauses of the SELECT query, appearing in any order:
                    "query": {
                        "from":     "${Student} st",
                        "where":    "st.StudentID = @id",
                        // NOTE: The '__obj$' column prefix is a directive which controls the JSON response.
                        // The name following the '$' is the key given to a new JSON sub-object. The column's
                        // value is tested for nullability and if it is null then the key's value in the
                        // response is null, otherwise it is a valid JSON object composed of all columns
                        // following the '__obj$' until the next '__obj$' directive is given.
                        "select":   "st.StudentID AS __obj$Student, ${Student;st}"
                    }
                },
                "Test": {
                    "parameters": {
                        // Add `"optional": true` to make a parameter optional; its default value will be the value of
                        // the "default" property (if it exists) or `null`.
                        "test":     { "sqlName": "@test",   "type": "Grade",    "optional": true, "default": 10 }
                    },
                    "query": {
                        "select":   "@test AS Test"
                    }
                }
            }
        },
        "sis;core;v2": {
            // The "base" directive indicates which service to inherit the definition of. Everything defined in
            // the base service is included in this definition and may be overridden or removed by assigning it
            // to a `null` value.
            "base": "sis;core;v1",
            // Methods are added to/overwritten over the base service:
            "methods": {
                // Define a Questionable method to demonstrate deprecation:
                "Questionable": {
                    "parameters": {
                        "id":       { "sqlName": "@id",     "type": "StudentID" },
                        "test":     { "sqlName": "@test",   "type": "Grade",    "optional": true }
                    },
                    "query": {
                        // Adding a property name starting with "xmlns:" will add a ;WITH XMLNAMESPACES directive
                        // useful for selecting data from `xml` typed columns in your query. This example does not
                        // use it currently.
                        "xmlns:sis":    "http://sis.example.org/sis/core/v1",
                        "from":         "${Student} st",
                        "where":        "st.WrongID = @id",
                        "select":       "st.StudentID"
                    }
                }
            }
        },
        "sis;core;v3": {
            "base": "sis;core;v2",
            // Methods are added to/overwritten over the base service:
            "methods": {
                // We deprecate the "Questionable" method here with a warning message; it may still be used, but
                // a warning will be issued.
                "Questionable": { "deprecated": "This method does not correctly query data." }
            }
        },
        "sis;core;v4": {
            "base": "sis;core;v3",
            "parameterTypes": {
                "LastName":     { "type": "nvarchar(50)" }
            },
            "methods": {
                // We remove the "Questionable" method here by setting it to `null`. Requests to use it are
                // given a "400 Bad Request" response.
                "Questionable": null,
                // Add a new method:
                "GetStudentByName": {
                    "parameters": {
                        "firstName":    { "sqlName": "@firstName",  "type": "FirstName" },
                        "lastName":     { "sqlName": "@lastName",   "type": "LastName" }
                    },
                    "query": {
                        "from":         "${Student} st",
                        "where":        "(st.FirstName = @firstName) AND (st.LastName = @lastName)",
                        "select":       "st.StudentID AS __obj$Student, ${Student;st}"
                    }
                }
            }
        },
        // Here we introduce the HSON `@import` directive used to directly import HSON from other
        // local files directly into this document. This helps break out large service offerings
        // into more manageable divisions. `@import` directives may be placed at any point in the
        // HSON document, so long as the final result produces a well-formed JSON result.
        @import("../../sis;core;v5.hson"),

        // Some error detection/reporting test cases:
        "error-tests": {
            "$": null,
            "parameterTypes": null,
            "methods": {
                "Test1": {
                    "parameters": {
                        "id": { "sqlName": "@id", "type": "nonexistent" }
                    }
                },
                "Test2": {
                    "parameters": {
                        "id": { "sqlName": "@id", "sqlType": "int" }
                    }
                },
                "Test3": {
                    "query": {}
                },
                "Test4": {
                    "query": {
                        "select": "* from test"
                    }
                },
                "Test5": {
                    "query": {
                        "select":   "*",
                        "from":     "test where 1 = 1"
                    }
                },
                "Test6": {
                    "query": {
                        "select":   "*",
                        "from":     "test",
                        "where":    "1 = 1 group by 1"
                    }
                },
                "Test7": {
                    "query": {
                        "select":   "*",
                        "from":     "test",
                        "where":    "1 = 1",
                        "groupBy":  "1 having count(1) > 1"
                    }
                },
                "Test8": {
                    "query": {
                        "select":   "*",
                        "from":     "test",
                        "where":    "1 = 1",
                        "groupBy":  "1",
                        "having":   "count(1) > 1 order by 1"
                    }
                },
                "Test9": {
                    "query": {
                        "select":   "*",
                        "from":     "test",
                        "where":    "1 = 1",
                        "groupBy":  "1",
                        "having":   "count(1) > 1",
                        "orderBy":  "1 for xml auto"
                    }
                },
                "Test10": {
                    "sql": @"
INSERT INTO table
SELECT * FROM othertable
"
                }
            }
        },

        "tests": {
            "connection": {
                "dataSource":       "(local)\\SQLEXPRESS",
                "initialCatalog":   "APITest"
            },
            "methods": {
                "Test1": {
                    "parameters": {
                        "t01": { "sqlType": "bigint" },
                        "t02": { "sqlType": "binary" },
                        "t03": { "sqlType": "bit" },
                        "t04": { "sqlType": "char" },
                        "t05": { "sqlType": "date" },
                        "t06": { "sqlType": "datetime" },
                        "t07": { "sqlType": "datetime2" },
                        "t08": { "sqlType": "datetimeoffset" },
                        "t09": { "sqlType": "decimal" },
                        "t10": { "sqlType": "float" },
                        "t11": { "sqlType": "geography" },
                        "t12": { "sqlType": "geometry" },
                        "t13": { "sqlType": "hierarchyid" },
                        "t14": { "sqlType": "image" },
                        "t15": { "sqlType": "int" },
                        "t16": { "sqlType": "money" },
                        "t17": { "sqlType": "nchar" },
                        "t18": { "sqlType": "ntext" },
                        "t19": { "sqlType": "numeric" },
                        "t20": { "sqlType": "nvarchar" },
                        "t21": { "sqlType": "ntext" },
                        "t22": { "sqlType": "real" },
                        "t23": { "sqlType": "smalldatetime" },
                        "t24": { "sqlType": "smallint" },
                        "t25": { "sqlType": "smallmoney" },
                        "t26": { "sqlType": "sql_variant" },
                        "t27": { "sqlType": "text" },
                        "t28": { "sqlType": "time" },
                        "t29": { "sqlType": "timestamp" },
                        "t30": { "sqlType": "tinyint" },
                        "t31": { "sqlType": "uniqueidentifier" },
                        "t32": { "sqlType": "varbinary" },
                        "t33": { "sqlType": "varchar" },
                        "t34": { "sqlType": "xml" }
                    },
// test URL: http://localhost/data/tests/Test1?t01=%00&t02=%00&t03=%00&t04=%00&t05=%00&t06=%00&t07=%00&t08=%00&t09=%00&t10=%00&t11=%00&t12=%00&t13=%00&t14=%00&t15=%00&t16=%00&t17=%00&t18=%00&t19=%00&t20=%00&t21=%00&t22=%00&t23=%00&t24=%00&t25=%00&t26=%00&t27=%00&t28=%00&t29=%00&t30=%00&t31=%00&t32=%00&t33=%00&t34=%00
                    "query": {
                        "from":     "Test",
                        "select":   "*"
                    }
                }
            }
        }
    }
}