/*
  This is a services descriptor configuration file encoded in HSON, a human-readable, extended JSON format
  with support for comments and multi-line string literals.

  A multiline string literal is defined as @"..." and has the same semantics as C#'s multiline string literal.
  Comments may appear in block-format like this, or in single-line format like below.

  In order to expedite parsing, forward-references are not allowed. Services must be defined
  in document order.

  Service names may be subdivided into multiple parts, so long as the parts are separated by ';'. Do not use
  '/' to separate service name parts as that will conflict with URL requirements.

  API request URLs are of the form:
    `GET /meta/serviceName`
    `GET /meta/serviceName/methodName`
    `GET /data/serviceName/methodName?params`
  Examples:
    `GET /data/sis;quad/GetStudent?id=1`
*/
{
    // This is the main set of aliases for services:
    "aliases": {
        "sis;core": "sis;core;v1",
        "sis;quad": "sis;quad;v3"
    },
    // This is the main services description section:
    "services": {
        // The "$" key indicates a shared dictionary of key/value pairs. This is the global dictionary.
        // Its values may be overridden per service. These values can be interpolated in string literals with
        // the interpolation syntax `${key}`. Key names may be anything, excluding the `}` character.
        "$": {
            // Here we define the database view names for versioning purposes:
            "Student":  "vw_Student",
        },
        // This is version "v1" of the "core":
        "sis;core;v1": {
            // This is the base dictionary. Its values may be overridden in derived services.
            "$": {
                // Here we define the database view names for versioning purposes:
                "Student":      "vw001_Student",
                // 'Student;st' is a list of the columns commonly selected from the 'Student' view using the
                // 'st' alias:
                "Student;st":   "st.StudentID, st.FirstName, st.LastName"
            },
            // The shared DB connection for all methods (but may be overridden per method):
            "connection": {
                // Data Source:
                "ds": "(local)\\SQLEXPRESS",
                // Initial Catalog:
                "ic": "APITest"
                // NOTE: If "uid" is missing, SSPI is assumed.
                // User ID:
                //"uid": "username"
                // Password:
                //"pwd": "password"
            },
            // This is where we define common parameter types:
            "parameterTypes": {
                "StudentID": { "type": "int" },
                "FirstName": { "type": "nvarchar(50)" },
                "DateTimeOffset": { "type": "datetimeoffset(7)" },
                "Grade": { "type": "decimal(8,4)" }
            },
            // This is the main method definition section:
            "methods": {
                // Each key is a specific method name; method names must be unique:
                "GetStudent": {
                    // This is the mapping of which query-string parameter names map to which SQL parameters:
                    "parameters": {
                        "id": { "sqlName": "@id", "type": "StudentID" }
                    },
                    // The individual clauses of the SELECT query, appearing in any order:
                    "query": {
                        "from":     "${Student} st",
                        "where":    "st.StudentID = @id",
                        // NOTE: The '__obj$' column prefix is a directive which controls the JSON response.
                        // The name following the '$' is the key given to a new JSON sub-object. The column's
                        // value is tested for nullability and if it is null then the key's value in the
                        // response is null, otherwise it is a valid JSON object composed of all columns
                        // following the '__obj$' until the next '__obj$' directive is given.
                        "select":   "st.StudentID AS __obj$Student, ${Student;st}"
                    }
                },
                "Test": {
                    "parameters": {
                        "test": { "sqlName": "@test", "type": "Grade", "optional": true }
                    },
                    "query": {
                        "select":       "@test AS Test"
                    }
                }
            }
        },
        // Here we define Quad-specific service offerings:
        "sis;quad;v1": {
            // The "base" directive indicates which service to inherit the definition of. Everything defined in
            // the base service is included in this definition and may be overridden or removed by assigning it
            // to a `null` value.
            "base": "sis;core;v1",
            // Methods are added to/overwritten over the base service:
            "methods": {
                // Define a Questionable method to demonstrate deprecation:
                "Questionable": {
                    "parameters": {
                        "id": { "sqlName": "@id", "type": "StudentID" },
                        "test": { "sqlName": "@test", "type": "Grade", "optional": true }
                    },
                    "query": {
                        "xmlns:sis":    "http://sis.example.org/sis/core/v1",
                        "from":         "${Student} st",
                        "where":        "st.WrongID = @id",
                        "select":       "st.StudentID"
                    }
                }
            }
        },
        "sis;quad;v2": {
            // Based on version "v1" above:
            "base": "sis;quad;v1",
            // Methods are added to/overwritten over the base service:
            "methods": {
                // We deprecate the "Questionable" method here with a warning message; it may still be used, but
                // a warning will be issued.
                "Questionable": { "deprecated": "This method does not correctly query data." }
            }
        },
        "sis;quad;v3": {
            "base": "sis;quad;v2",
            // Methods are removed by assigning `null`:
            "methods": {
                // We remove the "Questionable" method here by setting it to `null`. Requests to use it are
                // given a "400 Bad Request" response.
                "Questionable": null
            }
        }
    }
}